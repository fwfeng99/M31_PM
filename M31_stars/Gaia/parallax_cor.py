# -*- coding: utf-8 -*-
"""
-------------------------------------------------------------
Time    : 2023/12/20 17:59
Author  : Fang
File    : parallax_cor.py
Project : M31_Kinematics
-------------------------------------------------------------
"""

import numpy as np


def b_cor(i, beta):
    if i == 0:
        return 1

    elif i == 1:
        return np.sin(beta)

    elif i == 2:
        return np.sin(beta) ** 2 - 1 / 3


def c_cor(i, veff):
    if i == 0:
        return 1

    elif i == 1:
        if veff <= 1.24:
            return -0.24
        elif 1.24 < veff <= 1.72:
            return veff - 1.48
        else:
            return 0.24

    elif i == 2:
        if veff <= 1.24:
            return 0.24 ** 3
        elif 1.24 < veff <= 1.48:
            return (1.48 - veff) ** 3
        else:
            return 0

    elif i == 3:
        if veff <= 1.24:
            return veff - 1.24
        else:
            return 0

    elif i == 4:
        if veff <= 1.72:
            return 0
        else:
            return veff - 1.72


def Q_cor(i, j, G, p_num):
    if p_num == 5:
        q_values = q5_values
        if i == 0:
            if j > 2:
                return 0
            else:
                index = j
        elif i == 1:
            if j > 1:
                return 0
            else:
                index = 3 + j
        else:
            if j > 0:
                return 0
            else:
                index = p_num + i - 2

    if p_num == 6:
        q_values = q6_values
        if i == 0:
            if j > 2:
                return 0
            else:
                index = j
        elif i == 1:
            if j > 2:
                return 0
            else:
                index = 3 + j
        elif i == 2:
            if j > 0:
                return 0
            else:
                index = p_num + i - 2
        else:
            return 0

    # print('index:', index)
    return np.interp(G, G_values, q_values[:, index])


G_values = [6.0, 10.8, 11.2, 11.8, 12.2, 12.9, 13.1, 15.9, 16.1, 17.5, 19.0, 20.0, 21.0]

q5_values = np.array([
    [-26.98, -9.62, 27.40, -25.1, 0.0, -1257, 0, 0],
    [-27.23, -3.07, 23.04, 35.3, 15.7, -1257, 0, 0],
    [-30.33, -9.23, 9.08, -88.4, -11.8, -1257, 0, 0],
    [-33.54, -10.08, 13.28, -126.7, 11.6, -1257, 0, 0],
    [-13.65, -0.07, 9.35, -111.4, 40.6, -1257, 0, 0],
    [-19.53, -1.64, 15.86, -66.8, 20.6, -1257, 0, 0],
    [-37.99, 2.63, 16.14, -5.7, 14.0, -1257, 107.9, 104.3],
    [-38.33, 5.61, 15.42, 0, 18.7, -1189, 243.8, 155.2],
    [-31.05, 2.83, 8.59, 0, 15.5, -1404, 105.5, 170.7],
    [-29.18, -0.09, 2.41, 0, 24.5, -1165, 189.7, 325.0],
    [-18.40, 5.98, -6.46, 0, 5.5, 0, 0, 276.6],
    [-12.65, -4.57, -7.46, 0, 97.9, 0, 0, 0],
    [-18.22, -15.24, -18.54, 0, 128.2, 0, 0, 0]
])
q6_values = np.array([
    [-27.85, -7.78, 27.47, -32.1, 14.4, 9.5, -67.],
    [-28.91, -3.57, 22.92, 7.7, 12.6, 1.6, -572.],
    [-26.72, -8.74, 9.36, -30.3, 5.6, 17.2, -1104.],
    [-29.04, -9.69, 13.63, -49.4, 36.3, 17.7, -1129.],
    [-12.39, -2.16, 10.23, -92.6, 19.8, 27.6, -365.],
    [-18.99, -1.93, 15.9, -57.2, -8., 19.9, -554.],
    [-38.29, 2.59, 16.2, -10.5, 1.4, 0.4, -960.],
    [-36.83, 4.2, 15.76, 22.3, 11.1, 10., -1367.],
    [-28.37, 1.99, 9.28, 50.4, 17.2, 13.7, -1351.],
    [-24.68, -1.37, 3.52, 86.8, 19.8, 21.3, -1380.],
    [-15.32, 4.01, -6.03, 29.2, 14.1, 0.4, -563.],
    [-13.73, -10.92, -8.3, -74.4, 196.4, -42., 536.],
    [-29.53, -20.34, -18.74, -39.5, 326.8, -262.3, 1598.]
])
